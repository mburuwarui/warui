defmodule Warui.Repo.TenantMigrations.AddTreasuryDomainAndResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_ledgers, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "user_ledgers_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :ledger_id, :uuid
    end

    create table(:ledgers, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:user_ledgers, prefix: prefix()) do
      modify :ledger_id,
             references(:ledgers,
               column: :id,
               name: "user_ledgers_ledger_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    create unique_index(:user_ledgers, [:user_id, :ledger_id],
             name: "user_ledgers_unique_user_ledger_index"
           )

    alter table(:ledgers, prefix: prefix()) do
      add :name, :text, null: false
      add :slug, :text
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_user_id,
          references(:users,
            column: :id,
            name: "ledgers_owner_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:ledgers, "ledgers_owner_user_id_fkey")

    alter table(:ledgers, prefix: prefix()) do
      remove :owner_user_id
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :slug
      remove :name
    end

    drop_if_exists unique_index(:user_ledgers, [:user_id, :ledger_id],
                     name: "user_ledgers_unique_user_ledger_index"
                   )

    drop constraint(:user_ledgers, "user_ledgers_ledger_id_fkey")

    alter table(:user_ledgers, prefix: prefix()) do
      modify :ledger_id, :uuid
    end

    drop table(:ledgers, prefix: prefix())

    drop constraint(:user_ledgers, "user_ledgers_user_id_fkey")

    drop table(:user_ledgers, prefix: prefix())
  end
end
