defmodule Warui.Repo.Migrations.AddMultitenancyTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      add :current_organization, :text
    end

    create table(:user_organizations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "user_organizations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :organization_id, :uuid
    end

    create table(:organizations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:user_organizations) do
      modify :organization_id,
             references(:organizations,
               column: :id,
               name: "user_organizations_organization_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:user_organizations, [:user_id, :organization_id],
             name: "user_organizations_unique_user_organization_index"
           )

    alter table(:organizations) do
      add :name, :text, null: false
      add :domain, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_user_id,
          references(:users,
            column: :id,
            name: "organizations_owner_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:organizations, "organizations_owner_user_id_fkey")

    alter table(:organizations) do
      remove :owner_user_id
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :domain
      remove :name
    end

    drop_if_exists unique_index(:user_organizations, [:user_id, :organization_id],
                     name: "user_organizations_unique_user_organization_index"
                   )

    drop constraint(:user_organizations, "user_organizations_organization_id_fkey")

    alter table(:user_organizations) do
      modify :organization_id, :uuid
    end

    drop table(:organizations)

    drop constraint(:user_organizations, "user_organizations_user_id_fkey")

    drop table(:user_organizations)

    alter table(:users) do
      remove :current_organization
    end
  end
end
