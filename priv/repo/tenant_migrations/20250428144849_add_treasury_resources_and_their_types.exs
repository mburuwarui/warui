defmodule Warui.Repo.TenantMigrations.AddTreasuryResourcesAndTheirTypes do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:transfers, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :amount, :decimal, null: false
      add :status, :text, null: false, default: "pending"
      add :description, :text
      add :settled_at, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_id,
          references(:users,
            column: :id,
            name: "transfers_owner_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :from_account_id, :uuid, null: false
      add :to_account_id, :uuid, null: false
      add :ledger_id, :uuid, null: false
      add :transfer_type_id, :uuid, null: false
    end

    create table(:transfer_types, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :name, :text, null: false
      add :description, :text
      add :code, :bigint, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:transfer_types, [:code], name: "transfer_types_unique_code_index")

    create unique_index(:transfer_types, [:name], name: "transfer_types_unique_name_index")

    rename table(:ledgers), :owner_user_id, to: :owner_id

    drop constraint(:ledgers, "ledgers_owner_user_id_fkey")

    alter table(:ledgers, prefix: prefix()) do
      add :currency_id, :uuid, null: false
      add :asset_type_id, :uuid, null: false
    end

    create table(:currencies, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:ledgers, prefix: prefix()) do
      modify :currency_id,
             references(:currencies,
               column: :id,
               name: "ledgers_currency_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:currencies, prefix: prefix()) do
      add :name, :text, null: false
      add :symbol, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:currencies, [:name], name: "currencies_unique_name_index")

    create unique_index(:currencies, [:symbol], name: "currencies_unique_symbol_index")

    create table(:assets, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :name, :text, null: false
      add :description, :text
      add :value, :decimal, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :currency_id,
          references(:currencies,
            column: :id,
            name: "assets_currency_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false

      add :asset_type_id, :uuid, null: false
    end

    create table(:asset_types, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:ledgers, prefix: prefix()) do
      modify :asset_type_id,
             references(:asset_types,
               column: :id,
               name: "ledgers_asset_type_id_fkey",
               type: :uuid,
               prefix: prefix()
             )

      modify :owner_id,
             references(:users,
               column: :id,
               name: "ledgers_owner_id_fkey",
               type: :uuid,
               prefix: "public"
             ),
             null: false
    end

    alter table(:assets, prefix: prefix()) do
      modify :asset_type_id,
             references(:asset_types,
               column: :id,
               name: "assets_asset_type_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:asset_types, prefix: prefix()) do
      add :name, :text, null: false
      add :description, :text
      add :code, :bigint, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :currency_id,
          references(:currencies,
            column: :id,
            name: "asset_types_currency_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false
    end

    create unique_index(:asset_types, [:code], name: "asset_types_unique_code_index")

    create unique_index(:asset_types, [:name], name: "asset_types_unique_name_index")

    create table(:accounts, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:transfers, prefix: prefix()) do
      modify :from_account_id,
             references(:accounts,
               column: :id,
               name: "transfers_from_account_id_fkey",
               type: :uuid,
               prefix: prefix()
             )

      modify :to_account_id,
             references(:accounts,
               column: :id,
               name: "transfers_to_account_id_fkey",
               type: :uuid,
               prefix: prefix()
             )

      modify :ledger_id,
             references(:ledgers,
               column: :id,
               name: "transfers_ledger_id_fkey",
               type: :uuid,
               prefix: prefix()
             )

      modify :transfer_type_id,
             references(:transfer_types,
               column: :id,
               name: "transfers_transfer_type_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:accounts, prefix: prefix()) do
      add :name, :text, null: false
      add :slug, :text
      add :description, :text
      add :status, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_id,
          references(:users,
            column: :id,
            name: "accounts_owner_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :ledger_id,
          references(:ledgers,
            column: :id,
            name: "accounts_ledger_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false

      add :account_type_id, :uuid, null: false
    end

    create table(:account_types, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:accounts, prefix: prefix()) do
      modify :account_type_id,
             references(:account_types,
               column: :id,
               name: "accounts_account_type_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:account_types, prefix: prefix()) do
      add :name, :text, null: false
      add :description, :text
      add :code, :bigint, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:account_types, [:code], name: "account_types_unique_code_index")

    create unique_index(:account_types, [:name], name: "account_types_unique_name_index")
  end

  def down do
    drop_if_exists unique_index(:account_types, [:name], name: "account_types_unique_name_index")

    drop_if_exists unique_index(:account_types, [:code], name: "account_types_unique_code_index")

    alter table(:account_types, prefix: prefix()) do
      remove :updated_at
      remove :inserted_at
      remove :code
      remove :description
      remove :name
    end

    drop constraint(:accounts, "accounts_account_type_id_fkey")

    alter table(:accounts, prefix: prefix()) do
      modify :account_type_id, :uuid
    end

    drop table(:account_types, prefix: prefix())

    drop constraint(:accounts, "accounts_owner_id_fkey")

    drop constraint(:accounts, "accounts_ledger_id_fkey")

    alter table(:accounts, prefix: prefix()) do
      remove :account_type_id
      remove :ledger_id
      remove :owner_id
      remove :updated_at
      remove :inserted_at
      remove :status
      remove :description
      remove :slug
      remove :name
    end

    drop constraint(:transfers, "transfers_from_account_id_fkey")

    drop constraint(:transfers, "transfers_to_account_id_fkey")

    drop constraint(:transfers, "transfers_ledger_id_fkey")

    drop constraint(:transfers, "transfers_transfer_type_id_fkey")

    alter table(:transfers, prefix: prefix()) do
      modify :transfer_type_id, :uuid
      modify :ledger_id, :uuid
      modify :to_account_id, :uuid
      modify :from_account_id, :uuid
    end

    drop table(:accounts, prefix: prefix())

    drop_if_exists unique_index(:asset_types, [:name], name: "asset_types_unique_name_index")

    drop_if_exists unique_index(:asset_types, [:code], name: "asset_types_unique_code_index")

    drop constraint(:asset_types, "asset_types_currency_id_fkey")

    alter table(:asset_types, prefix: prefix()) do
      remove :currency_id
      remove :updated_at
      remove :inserted_at
      remove :code
      remove :description
      remove :name
    end

    drop constraint(:assets, "assets_asset_type_id_fkey")

    alter table(:assets, prefix: prefix()) do
      modify :asset_type_id, :uuid
    end

    drop constraint(:ledgers, "ledgers_asset_type_id_fkey")

    drop constraint(:ledgers, "ledgers_owner_id_fkey")

    alter table(:ledgers, prefix: prefix()) do
      modify :owner_user_id,
             references(:users,
               column: :id,
               name: "ledgers_owner_user_id_fkey",
               type: :uuid,
               prefix: "public"
             ),
             null: true

      modify :asset_type_id, :uuid
    end

    drop table(:asset_types, prefix: prefix())

    drop constraint(:assets, "assets_currency_id_fkey")

    drop table(:assets, prefix: prefix())

    drop_if_exists unique_index(:currencies, [:symbol], name: "currencies_unique_symbol_index")

    drop_if_exists unique_index(:currencies, [:name], name: "currencies_unique_name_index")

    alter table(:currencies, prefix: prefix()) do
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :symbol
      remove :name
    end

    drop constraint(:ledgers, "ledgers_currency_id_fkey")

    alter table(:ledgers, prefix: prefix()) do
      modify :currency_id, :uuid
    end

    drop table(:currencies, prefix: prefix())

    alter table(:ledgers, prefix: prefix()) do
      remove :asset_type_id
      remove :currency_id
    end

    rename table(:ledgers), :owner_id, to: :owner_user_id

    drop_if_exists unique_index(:transfer_types, [:name],
                     name: "transfer_types_unique_name_index"
                   )

    drop_if_exists unique_index(:transfer_types, [:code],
                     name: "transfer_types_unique_code_index"
                   )

    drop table(:transfer_types, prefix: prefix())

    drop constraint(:transfers, "transfers_owner_id_fkey")

    drop table(:transfers, prefix: prefix())
  end
end
